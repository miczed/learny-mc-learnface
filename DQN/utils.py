
import numpy as np
import matplotlib.pyplot as plt
import csv

#######################################################################################
#
#                                     PREPARATIONS
#
#######################################################################################

def compress_statespace(raw_statespace):
    '''
    :param raw_statespace:          The statespace as generated by gym in RGB.
                                    The statespace is an np.array with dimensions 96x96x3,
                                    which is the RGB of every pixel in the output

    :return: compressed_statespace: a compressed statespace in grayscale with
                                    dimension 7056(x1)

    this function
    - cuts away unused pixels
    - converts the state_space to grayscale
    - and normalizes the values to 0 to 1

    Function by https://github.com/elsheikh21/car-racing-ppo
    '''
    statespace_84x84 = raw_statespace[:-12, 6:-6]
    # this cuts away the lowest 12 pixels aswell as 6 left and right. returns 84x84
    compressed_statespace_84x84 = np.dot(statespace_84x84[...,0:3], [0.299, 0.587, 0.114])
    # scalar multiplication (dot-product) of every pixel with these values. these values are given by international
    # standards https://www.itu.int/rec/R-REC-BT.601-7-201103-I/en
    compressed_statespace_84x84_normalized = compressed_statespace_84x84/255.0
    # normalize the gray values to values between 0 and 1 (don't know if necessary)
    #return compressed_statespace_84x84_normalized
    compressed_statespace = compressed_statespace_84x84_normalized.flatten()
    # flat the matrix to a one-dimensional vector for the NN to read
    # don't know why elsheik is doing frame*2-1 tbh.... maybe to amplify 'color' intensity?
    return compressed_statespace

def compress_statespace_CONV2D(raw_statespace):
    '''
    :param raw_statespace:          The statespace as generated by gym in RGB.
                                    The statespace is an np.array with dimensions 96x96x3,
                                    which is the RGB of every pixel in the output

    :return: compressed_statespace: a compressed statespace in grayscale with
                                    dimension 84x84(x1)
    this function
    - cuts away unused pixels
    - converts the state_space to grayscale
    - and normalizes the values to 0 to 1
    Function by https://github.com/elsheikh21/car-racing-ppo
    '''
    statespace_84x84 = raw_statespace[:-12, 6:-6]
    # this cuts away the lowest 12 pixels aswell as 6 left and right. returns 84x84
    compressed_statespace_84x84 = np.dot(statespace_84x84[..., :3], [0.2989, 0.5870, 0.1140])
    compressed_statespace_84x84[(compressed_statespace_84x84 < 128) & (compressed_statespace_84x84 > 0)] = 1 # AND CONDITION TO KEEP MAKE BLACK OUTSIDE MAP BLACk
    compressed_statespace_84x84[compressed_statespace_84x84 >= 128] = 0
    # scalar multiplication (dot-product) of every pixel with these values. these values are given by international
    # standards https://www.itu.int/rec/R-REC-BT.601-7-201103-I/en
    # NOW PURE B/W
    # https://stackoverflow.com/questions/18777873/convert-rgb-to-black-or-white
    compressed_statespace_84x84_normalized = compressed_statespace_84x84/255.0
    # normalize the gray values to values between 0 and 1 (don't know if necessary)
    # downsapmle (stolen from michael and albert)
    compressed_statespace_42x42_normalized = compressed_statespace_84x84_normalized[0::2, 0::2]
    return compressed_statespace_42x42_normalized

def transform_action(action):
    '''
    :param action:                      a discretized action_space as a single integer
                                        0 = nothing
                                        1 = hard left
                                        2 = hard right
                                        3 = full accelerating
                                        4 = (mild?) breaking
    :return: quasi_continuous_action:   The action_space as generated by gym [n, n, n]
                                        for [steering, accelerating, breaking]
                                        can be -1 to 1 for steering and 0 to 1 for accelerating and breaking
                                        these are continuous values

    This function is used to transform the actions generated by the NN to a format that the environment can use
    Function by https://github.com/NotAnyMike/gym/blob/master/gym/envs/box2d/car_racing.py


    https://arxiv.org/pdf/2010.00717.pdf BREAK AND STEER
    '''
    if action == 0: quasi_continuous_action = [0, 0, 0.0]  # Nothing
    elif action == 1: quasi_continuous_action = [-1, 0, 0.0]  # Left
    elif action == 2: quasi_continuous_action = [+1, 0, 0.0]  #  Right
    elif action == 3: quasi_continuous_action = [0, +1, 0.0]  # Accelerate
    elif action == 4: quasi_continuous_action = [0, 0, +1]  # break
    else: print("action faulty for action transform", action)
    return quasi_continuous_action

def plot_learning_curve(x, scores, epsilons, filename):
    '''
    Args:
        x: counter of episodes
        scores: socre per episode
        epsilons: epsilon per episode
        filename: where to store plot
        reload: used to continue plotting a resumed training
    Returns: a plot
    Function by 'ML with Phil' https://github.com/philtabor/Deep-Q-Learning-Paper-To-Code/blob/master/utils.py
    '''

    fig=plt.figure()
    ax=fig.add_subplot(111, label="1")
    ax2=fig.add_subplot(111, label="2", frame_on=False)

    ax.plot(x, epsilons, color="C0")
    ax.set_xlabel("Episode", color="C0")
    ax.set_ylabel("Epsilon", color="C0")
    ax.tick_params(axis='x', colors="C0")
    ax.tick_params(axis='y', colors="C0")

    N = len(scores)
    running_avg = np.empty(N)
    for t in range(N):
	    running_avg[t] = np.mean(scores[max(0, t-20):(t+1)])


    ax2.scatter(x, scores, color="C1")
    ax2.plot(x, running_avg, color="C1")
    ax2.axes.get_xaxis().set_visible(False)
    ax2.yaxis.tick_right()
    ax2.set_ylabel('Score and MA20', color="C1")
    ax2.yaxis.set_label_position('right')
    ax2.tick_params(axis='y', colors="C1")

    plt.savefig(filename)
    plt.close('all')
    fig.canvas.flush_events()


#   CODE TO SHOW THE EFFECT OF THE STATESPACE COMPRESS FUNCTION
#import gym
#env = gym.make("CarRacing-v0")
#env.seed(20)
#obs = env.reset()
#for i in range(60):
#    obs, a, b, c = env.step([0, +1, 0])
#obs = compress_statespace_CONV2D(obs)
#plt.imshow(obs, plt.cm.gray)
#plt.show()