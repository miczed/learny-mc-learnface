import gym
import numpy as np


env = gym.make('CarRacing-v0')
best_score = 0





#######################################################################################
#
#                                     RANDOM AGENT
#
#######################################################################################

'''
for i in range(1): #Here state the number of games do you want the AI to play
    average_score=[]
    cnt=0
    done=False
    observation=env.reset()
    while not done:
        cnt+=1
        env.render()
        action = env.action_space.sample() # take a random action
        observation,reward,done,info=env.step(action)
        if done:
            print(reward)
            average_score.append(reward)
            break
    best_score=max(average_score)
env.close()
'''

#######################################################################################
#
#                                     PREPARATIONS
#
#######################################################################################

observation = env.reset()
for _ in range(15):
    env.render()
    action = env.action_space.sample()
    observation, reward, done, info = env.step(action)

def compress_statespace(raw_statespace):

    '''

    :param raw_statespace:          The statespace as generated by gym in RGB.
                                    The statespace is an np.array with dimensions 96x96x3,
                                    which is the RGB of every pixel in the output

    :return: compressed_statespace: a compressed statespace in grayscale with
                                    dimension 9216(x1)

    this function
    - converts the state_space to grayscale
    - and normalizes the values to 0 to 1

    '''

    raw_statespace = np.dot(raw_statespace[...,0:3], [0.299, 0.587, 0.114])
    # scalar multiplication (dot-product) of every pixel with these values. these values are given by international
    # standards https://www.itu.int/rec/R-REC-BT.601-7-201103-I/en

    compressed_statespace_96x96 = raw_statespace/255.0
    # normalize the gray values to values between 0 and 1 (don't know if necessary)

    compressed_statespace = compressed_statespace_96x96.flatten()

    # don't know why elsheik is doing frame*2-1 tbh....

    return compressed_statespace


print(observation)
print(observation.shape)
compressed_observation = compress_statespace(observation)
print(compressed_observation)
print(compressed_observation.shape)





#######################################################################################
#
#                                     DQN
#
#######################################################################################






import random
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import Adam
from collections import deque
from keras.utils.vis_utils import plot_model



class DQN:
    def __init__(self, env):
        self.env = env
        self.memory = deque(maxlen=2000)

        self.gamma = 0.85           # discount factor
        self.epsilon = 1.0          # exploration vs explotation, i.e. rate to deviate to random actions
        self.epsilon_min = 0.01     # minimum epsilon
        self.epsilon_decay = 0.995  # how epsilon evolves (we want much exploration at the beginning and only few in the end)
        self.learning_rate = 0.005  # rate to update "Q-table"
        self.tau = .125             # rate to update target (goal) model

        self.model = self.create_model()            # create model (what actions to take)
        self.target_model = self.create_model()     # and target model (and what actions we want it to take) this is done not to vary the goal while training

    def create_model(self):         # initiate model and add layers to NN, define activation function and shapes of in- and output
        model = Sequential()

        model.add(Dense(24, input_dim=compressed_observation.shape[0], activation="relu"))             # TODO Get shape right

        model.add(Dense(4606, activation="relu"))                             # dense_1
        model.add(Dense(2303, activation="relu"))                             # dense_2
        model.add(Dense(1151, activation="relu"))                             # dense_3
        model.add(Dense(3))                                                   # dense_4                 # TODO Get shape right

        model.compile(loss="mean_squared_error",optimizer=Adam(lr=self.learning_rate))
        return model




    def act(self, state):                                   # funtion to actually perform actions

        # NOT COMPRESS AS THE FUNCTION IS ONLY FED WITH COMRESSED
        self.epsilon *= self.epsilon_decay                  # let epsilon decay
        self.epsilon = max(self.epsilon_min, self.epsilon)  # make sure it's not lower than minimum
        if np.random.random() < self.epsilon:               # randomly decide if exploit or explore
            print("DEBUG explore")
            return self.env.action_space.sample()               # explore

        print("DEBUG exploit")
        print(state)
        print(state.shape)
        print("X")
        print(self.model.predict(state))                            # TODO I HAVE NO IDEA HOW THIS THROWS THE ERROR
                                                                    # TODO  ValueError: Input 0 of layer sequential is incompatible with the layer: expected axis -1 of input shape to have value 9216 but received input with shape [32, 1]
                                                                    # TODO WHEN ITS CLEARLY (9216,)
        print(self.model.predict(state)[0])


        return np.argmax(self.model.predict(state)[0])          # exploit




    def remember(self, state, action, reward, new_state, done):         # remember previous state, action, reward

               # NOT COMPRESS AS THE FUNCTION IS ONLY FED WITH COMRESSED

        self.memory.append([state, action, reward, new_state, done])




    def replay(self):

        batch_size = 32
        if len(self.memory) < batch_size:
            return

        samples = random.sample(self.memory, batch_size)
        for sample in samples:
            state, action, reward, new_state, done = sample     # get a random state from the samples

            print("DEBUG",state)
            print("DEBUG",state.shape)

            target = self.target_model.predict(state)           # predict what to do with target model, given random state
            if done:
                target[0][action] = reward                      # does it return done? if yes nice
            else:
                Q_future = max(self.target_model.predict(new_state)[0]) # what is the future value of that state
                target[0][action] = reward + Q_future * self.gamma      # adjust "Q-table" with immediate reward, and discounted future Q-value
            self.model.fit(state, target, epochs=1, verbose=0)          # fit model to this "Q-table" (i.e. action to states)






    def target_train(self):                                     # reorient goals, i.e. copy the weights from the main model into the target model
        weights = self.model.get_weights()                      # since this is done less frequently, it doesn't distort goals while training
        target_weights = self.target_model.get_weights()
        for i in range(len(target_weights)):
            target_weights[i] = weights[i] * self.tau + target_weights[i] * (1 - self.tau) # adjust target weights at rate tau
        self.target_model.set_weights(target_weights)

    def save_model(self, fn):
        self.model.save(fn)


def main():
    env = gym.make("CarRacing-v0")
    gamma = 0.9
    epsilon = .95

    trials = 1          # aka episodes
    trial_len = 200     # how long one episode is

    # updateTargetNetwork = 1000
    dqn_agent = DQN(env=env)
    steps = []
    for trial in range(trials):
        cur_state = compress_statespace(env.reset())           # COMPRESS ?
        for step in range(trial_len):
            if step % 100 == 0:
                print("step:",step)

            action = dqn_agent.act(cur_state)               # act given current state
            new_state, reward, done, _ = env.step(action)   # result of act

            new_state = compress_statespace(new_state)      # COMPRESS ?

            # reward = reward if not done else -20          # don't know what that has been ???
            # new_state = new_state.reshape(1, 2)           # NOT NEEDED SINCE WE ALREADY COMPRESS???

            dqn_agent.remember(cur_state, action, reward, new_state, done)

            dqn_agent.replay()                              # internally iterates default (prediction) model
            dqn_agent.target_train()                        # iterates target model

            cur_state = new_state

            if done:
                print("done in trial",trial)
                break
        if step >= 199:                                                 # after 'for loop' finishes or done, check if step >199 then print fail
            print("However, failed to complete in under 200 steps in trial {}".format(trial))
            if step % 10 == 0:                                          # also save every 10th model
                dqn_agent.save_model("trial-{}.model".format(trial))
        else:                                                           # after 'for loop' finishes or done, check if step <=199 then print success
            print("Completed in {} in trial {}".format(step, trial))
            dqn_agent.save_model("success.model")
            break

    print(dqn_agent.model.summary())
    plot_model(dqn_agent.model, to_file='model_plot3.png', show_shapes=True, show_layer_names=True)


if __name__ == "__main__":
    main()



