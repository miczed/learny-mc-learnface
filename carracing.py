import gym
import numpy as np


env = gym.make('CarRacing-v0')
best_score = 0

#######################################################################################
#
#                                     RANDOM AGENT
#
#######################################################################################

'''
for i in range(1): #Here state the number of games do you want the AI to play
    average_score=[]
    cnt=0
    done=False
    observation=env.reset()
    while not done:
        cnt+=1
        env.render()
        action = env.action_space.sample() # take a random action
        observation,reward,done,info=env.step(action)
        if done:
            print(reward)
            average_score.append(reward)
            break
    best_score=max(average_score)
env.close()
'''

#######################################################################################
#
#                                     PREPARATIONS
#
#######################################################################################

observation = env.reset()
for _ in range(15):
    env.render()
    action = env.action_space.sample()
    observation, reward, done, info = env.step(action)

def compress_statespace(raw_statespace):

    '''

    :param raw_statespace:          The statespace as generated by gym in RGB.
                                    The statespace is an np.array with dimensions 96x96x3,
                                    which is the RGB of every pixel in the output

    :return: compressed_statespace: a compressed statespace in grayscale with
                                    dimension 96x96(x1)

    this function
    - converts the state_space to grayscale
    - and normalizes the values to 0 to 1

    '''

    raw_statespace = np.dot(raw_statespace[...,0:3], [0.299, 0.587, 0.114])
    # scalar multiplication (dot-product) of every pixel with these values. these values are given by international
    # standards https://www.itu.int/rec/R-REC-BT.601-7-201103-I/en

    compressed_statesace = raw_statespace/255.0
    # normalize the gray values to values between 0 and 1 (don't know if necessary)


    # don't know why elsheik is doing frame*2-1 tbh....

    return compressed_statesace


print(observation.shape)
compressed_observation = compress_statespace(observation)
print(compressed_observation.shape)























